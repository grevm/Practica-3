# -*- coding: utf-8 -*-
"""Práctica 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r-jvPVAUDN3xndoOQCX4S7CldGVqKex7
"""

import pandas as pd

class TrieNode:
    """
    Clase que representa un nodo en la estructura de datos Trie.

    Atributos:
        hijos (dict): Diccionario que mapea caracteres a nodos hijos en el trie.
        is_end_of_word (bool): Indica si este nodo es el final de una palabra en el trie.
        letter (str): La letra asociada con este nodo final.
    """

    def __init__(self):
        """
        Inicializa un nuevo nodo Trie con sus atributos predeterminados.
        """
        self.hijos = {}
        self.is_end_of_word = False
        self.letter = None

class Trie:
    """
    Clase que representa una estructura de datos Trie

    Atributos:
        raiz (TrieNode): El nodo raiz del trie.
        alphabet_mapping (dict): Mapeo de letras del alfabeto a códigos binarios.
        max_length (int): La longitud maxima de las cadenas de codigos binarios en el trie.
    """

    def __init__(self, excel_file):
        """
        Inicializa un nuevo trie con el archivo de Excel proporcionado y calcula el mapeo de alfabeto.

        Argumentos:
            excel_file (str): La ruta del archivo Excel que contiene el mapeo de alfabeto.
        """
        self.raiz = TrieNode()
        self.alphabet_mapping = self.construir_alphabet_mapping(excel_file)
        self.max_length = max(len(code) for code in self.alphabet_mapping.values())

    def construir_alphabet_mapping(self, excel_file):
        """
        Construye el mapeo de alfabeto a codigos binarios a partir del archivo de Excel.

        Argumentos:
            excel_file (str): La ruta del archivo Excel que contiene el mapeo de alfabeto.

        Retorna:
            dict: Un diccionario que mapea letras del alfabeto a códigos binarios.
        """
        df = pd.read_excel(excel_file, dtype={'Binary coding': str})
        # Asegurarse de que los códigos binarios sean cadenas
        return dict(zip(df['Letters'], df['Binary coding']))

    def construir_trie(self):
        """
        Construye el trie a partir del mapeo del alfabeto.
        """
        for letter, binary_string in self.alphabet_mapping.items():
            self.inserta(binary_string, letter)

    def inserta(self, word, letter=None):
        """
        Inserta una palabra (o codigo binario) en el trie.

        Argumentos:
            word (str): La palabra (codigo binario) que se va a insertar en el trie.
            letter (str): La letra asociada con la palabra, si es un nodo final.
        """
        current = self.raiz
        for char in word:
            if char not in current.hijos:
                current.hijos[char] = TrieNode()
            current = current.hijos[char]
        current.is_end_of_word = True
        if letter is not None:
            current.letter = letter  # Agregar la letra al nodo final

    def codificar_frase(self, frase):
        """
        Construye la representación binaria de una frase utilizando el mapeo de alfabeto.

        Argumentos:
            frase (str): La frase que se va a convertir a su representación binaria.

        Retorna:
            str: La representación binaria de la frase.
        """
        binary_frase = ""
        for letter in frase:
            if letter in self.alphabet_mapping:
                binary_frase += self.alphabet_mapping[letter]
            else:
                return "frase invalida"
        return binary_frase

    def decodificar_binario(self, cadena_binaria):
        """
        Decodifica una cadena binaria en letras del alfabeto utilizando el trie.

        Argumentos:
            cadena_binaria (str): La cadena binaria que se va a decodificar.

        Retorna:
            str: La decodificación de la cadena binaria en letras del alfabeto.
        """
        resultado = ''
        current = self.raiz
        for char in cadena_binaria:
            if char in current.hijos:
                current = current.hijos[char]
                if current.is_end_of_word:
                    resultado += current.letter
                    current = self.raiz  # Reiniciar para el siguiente caracter
            else:
                return "Cadena binaria inválida"
        return resultado




# ---------------------- Estos son los ejemplos -----------------------------------------------


# Ejemplo de uso del Trie (cambia la ruta del archivo)
trie = Trie('C:\\Users\\Daniel\\Downloads\\Prueba1.xlsx')

# Construir el trie a partir del mapeo del alfabeto
trie.construir_trie()

# Ejemplo de uso del método codificar_frase
frase = 'abracadabra'
frase_binaria = trie.codificar_frase(frase)
print(frase_binaria)  # Imprime la representación binaria de la frase

# Ejemplo de uso del método decodificar_binario
cadena_binaria = '10010000101010001100110000011001101010100100001010100011001'
resultado = trie.decodificar_binario(cadena_binaria)
print(resultado)  # Imprime la decodificación de la cadena binaria